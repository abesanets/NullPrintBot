import telebot
from telebot import types
from PIL import Image
from io import BytesIO
import time
import json
import os
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import threading
from telebot.types import Message

TOKEN = 'your-token'
bot = telebot.TeleBot(TOKEN)

def reset_daily_limits():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            users = load_users()
            for uid, data in users.items():
                if not data.get("is_premium", False):
                    data["daily_left"] = data.get("daily_limit", 5)
            save_users(users)
            time.sleep(60)  # –∂–¥—ë–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–æ—Å–∏–ª–æ—Å—å —Å–Ω–æ–≤–∞
        time.sleep(10)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# –í–Ω–∏–∑—É –ø–µ—Ä–µ–¥ bot.polling()
threading.Thread(target=reset_daily_limits, daemon=True).start()


TOKEN = '7985933208:AAFQJNFxobbwq-Tpurwmpyt-9lhuOSjJTlk'
bot = telebot.TeleBot(TOKEN)

user_sessions = {}
PARAMS_FILE = "params.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if os.path.exists(PARAMS_FILE):
    with open(PARAMS_FILE, "r") as f:
        saved_params = json.load(f)
else:
    saved_params = {}

def save_user_params(chat_id, params):
    saved_params[str(chat_id)] = params
    with open(PARAMS_FILE, "w") as f:
        json.dump(saved_params, f)


USERS_FILE = 'users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
def add_or_update_user(user):
    users = load_users()
    chat_id = str(user.id)
    now_date = datetime.utcnow().strftime('%Y-%m-%d')


    if chat_id in users:
        i = 1+1
    else:
        users[chat_id] = {
            "username": user.username or "",
            "first_name": user.first_name or "",
            "first_seen": now_date,
            "generate_count": 0,
            "is_premium": False,
            "daily_left": 5,
            "daily_limit": 5
        }

    save_users(users)


#region –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
ADMINS = ["5682825129"]
SETTINGS_FILE = 'settings.json'

# –°–æ–∑–¥–∞–Ω–∏–µ settings.json –µ—Å–ª–∏ –Ω–µ—Ç
if not os.path.exists(SETTINGS_FILE):
    with open(SETTINGS_FILE, 'w') as f:
        json.dump({"wait_time": 60}, f)

def load_settings():
    with open(SETTINGS_FILE, 'r') as f:
        return json.load(f)

def save_settings(settings):
    with open(SETTINGS_FILE, 'w') as f:
        json.dump(settings, f, indent=4)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ /setlimits (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):
@bot.message_handler(commands=['setlimits'])
def set_limits_start(message):
    if str(message.chat.id) not in ADMINS:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    bot.send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    bot.register_next_step_handler(message, process_new_limit)

def process_new_limit(message):
    try:
        new_limit = int(message.text)
        message.chat.new_limit = new_limit
        bot.send_message(message.chat.id, "‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
        bot.register_next_step_handler(message, process_new_wait_time, new_limit)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_new_limit)

def process_new_wait_time(message, new_limit):
    try:
        new_wait = int(message.text)
        settings = load_settings()
        settings['wait_time'] = new_wait
        save_settings(settings)

        # –û–±–Ω–æ–≤–∏–º daily_limit —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = load_users()
        for user_id in users:
            old_limit = users[user_id].get("daily_limit")
            users[user_id]['daily_limit'] = new_limit
            users[user_id]['daily_left'] = new_limit + (users[user_id].get("daily_left") - old_limit)
        save_users(users)

        bot.send_message(message.chat.id, "üì¢ –•–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–∞—Ö? (–¥–∞/–Ω–µ—Ç)")
        bot.register_next_step_handler(message, ask_broadcast_confirm, new_limit, new_wait)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥—ã).")
        bot.register_next_step_handler(message, process_new_wait_time, new_limit)

def ask_broadcast_confirm(message, new_limit, new_wait):
    if message.text.lower() in ['–¥–∞', 'yes']:
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í –∫–æ–Ω—Ü–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        bot.register_next_step_handler(message, process_broadcast_text, new_limit, new_wait)
    else:
        bot.send_message(message.chat.id, "‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

def process_broadcast_text(message, new_limit, new_wait):
    users = load_users()
    base_text = message.text
    full_message = f"{base_text}\n\nüìà –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_limit} –≤ –¥–µ–Ω—å\n‚è≥ –ù–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {new_wait} —Å–µ–∫"

    for user_id in users:
        try:
            bot.send_message(user_id, full_message)
        except:
            continue
    bot.send_message(message.chat.id, "‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

#endregion 



# –í —Ç–≤–æ—ë–º —Ö—ç–Ω–¥–ª–µ—Ä–µ /start –º–µ–Ω—è–µ–º —Ç–∞–∫:
@bot.message_handler(commands=['start', 'create'])
def start(message):
    add_or_update_user(message.from_user)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç *–æ—Å–Ω–æ–≤–æ–π*.", parse_mode="Markdown")
    user_sessions[message.chat.id] = {}

@bot.message_handler(content_types=['photo', 'document'])
def handle_image(message):
    chat_id = message.chat.id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        file = bot.download_file(file_info.file_path)
        image = Image.open(BytesIO(file)).convert('RGB')
        image_type = 'photo'
    elif message.content_type == 'document':
        if not message.document.mime_type.startswith("image/"):
            bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ-—Ñ–∞–π–ª.")
            return
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        image = Image.open(BytesIO(file)).convert('RGB')
        image_type = 'document'
    else:
        bot.send_message(chat_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
        return

    # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if chat_id not in user_sessions:
        user_sessions[chat_id] = {}

    # –ï—Å–ª–∏ –∏ base –∏ overlay —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if 'base' in user_sessions[chat_id] and 'overlay' in user_sessions[chat_id]:
        user_sessions[chat_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º base, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if 'base' not in user_sessions[chat_id]:
        user_sessions[chat_id]['base'] = image
        user_sessions[chat_id]['base_type'] = image_type
        bot.send_message(chat_id, "‚úÖ –ë–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∏–Ω—Ç –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è (—á—ë—Ä–Ω–æ-–±–µ–ª—ã–π).")
    else:
        # –ü—Ä–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω
        user_sessions[chat_id]['overlay'] = image.convert('L')
        user_id_str = str(chat_id)

        if user_id_str in saved_params:
            params = saved_params[user_id_str]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.add("‚úÖ –î–∞", "üîÅ –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ")
            bot.send_message(
                chat_id,
                f"‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–ö–∞–Ω–∞–ª: {params['channel']}, –î–µ–ª—å—Ç–∞: {params['delta']}, –ü–æ—Ä–æ–≥: {params['threshold']}",
                reply_markup=keyboard
            )
            bot.register_next_step_handler(message, use_old_or_new_params)
        else:
            ask_channel(message)




def use_old_or_new_params(message):
    if message.text == "‚úÖ –î–∞":
        apply_overlay_with_params(message.chat.id, saved_params[str(message.chat.id)])
    else:
        ask_channel(message)

def ask_channel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("R", "G", "B", "All")
    bot.send_message(message.chat.id,
                     "üî¥ *–ö–∞–Ω–∞–ª* ‚Äî –∫–∞–∫–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è.\n"
                     "üü• R ‚Äî –ö—Ä–∞—Å–Ω—ã–π, üü© G ‚Äî –ó–µ–ª—ë–Ω—ã–π, üü¶ B ‚Äî –°–∏–Ω–∏–π, üåà All ‚Äî –í—Å–µ —Å—Ä–∞–∑—É.\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:",
                     parse_mode="Markdown", reply_markup=markup)
    bot.register_next_step_handler(message, save_channel)

def save_channel(message):
    chat_id = message.chat.id
    user_sessions[chat_id]['params'] = {'channel': message.text.upper()}
    bot.send_message(chat_id,
                     "üîº *–î–µ–ª—å—Ç–∞* ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ (–æ–±—ã—á–Ω–æ 5‚Äì30).\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: `15`",
                     parse_mode="Markdown")
    bot.register_next_step_handler(message, save_delta)

def save_delta(message):
    chat_id = message.chat.id
    try:
        user_sessions[chat_id]['params']['delta'] = int(message.text)
        bot.send_message(chat_id,
                         "‚ö™ *–ü–æ—Ä–æ–≥ (Threshold)* ‚Äî —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—è –ø—Ä–∏–Ω—Ç–∞ (–æ—Ç 0 –¥–æ 255), –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.\n"
                         "–û–±—ã—á–Ω–æ: `128` –∏–ª–∏ `100` ‚Äî –∑–Ω–∞—á–∏—Ç, —á–µ–º —Å–≤–µ—Ç–ª–µ–µ –ø–∏–∫—Å–µ–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è.",
                         parse_mode="Markdown")
        bot.register_next_step_handler(message, save_threshold)
    except:
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–µ–ª—å—Ç—ã.")
        bot.register_next_step_handler(message, save_delta)

def save_threshold(message):
    chat_id = message.chat.id
    try:
        user_sessions[chat_id]['params']['threshold'] = int(message.text)
        params = user_sessions[chat_id]['params']
        save_user_params(chat_id, params)
        apply_overlay_with_params(chat_id, params)
    except:
        bot.send_message(chat_id, "‚ùó –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 255.")
        bot.register_next_step_handler(message, save_threshold)

def apply_overlay_with_params(chat_id, params):
    import json

    def load_settings():
        with open("settings.json", "r", encoding="utf-8") as f:
            return json.load(f)

    def get_wait_time():
        return load_settings().get("wait_time")
    
    wait_time = int(get_wait_time())



    
    users = load_users()
    chat_id_str = str(chat_id)
    user_data = users.get(chat_id_str, {})

    if not isinstance(user_data, dict):
        print(f"‚ùå –û—à–∏–±–∫–∞: user_data –¥–ª—è {chat_id_str} ‚Äî —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {user_data}")
        return


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º
    if not user_data.get('is_premium', False):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if user_data.get('daily_left', 0) <= 0:
            bot.send_message(chat_id, "üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ /premium.")
            return

        # –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        bot.send_message(chat_id, f"‚åõ –í—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {wait_time} —Å–µ–∫—É–Ω–¥.")
        time.sleep(wait_time - 1)

        # –£–º–µ–Ω—å—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ–º—É —é–∑–µ—Ä—É
        user_data["daily_left"] -= 1
        save_users(users)


    try:
        channel = params['channel']
        delta = params['delta']
        threshold = params['threshold']
        base = user_sessions[chat_id]['base'].copy()
        overlay = user_sessions[chat_id]['overlay'].resize(base.size)
        pixels = base.load()
        overlay_pixels = overlay.load()
        w, h = base.size

        for x in range(w):
            for y in range(h):
                if overlay_pixels[x, y] > threshold:
                    r, g, b = pixels[x, y]
                    if channel == 'R':
                        r = min(255, r + delta)
                    elif channel == 'G':
                        g = min(255, g + delta)
                    elif channel == 'B':
                        b = min(255, b + delta)
                    elif channel in ('ALL', 'A'):
                        r = min(255, r + delta)
                        g = min(255, g + delta)
                        b = min(255, b + delta)
                    pixels[x, y] = (r, g, b)

        bio = BytesIO()
        bio.name = 'result.png'
        base.save(bio, 'PNG')
        bio.seek(0)
        base_type = user_sessions[chat_id].get('base_type', 'photo')
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ 
        users = load_users()
        users[str(chat_id)]['generate_count'] += 1
        save_users(users)
        
        if base_type == 'document':
            bot.send_document(chat_id, bio, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–æ–º.")
        else:
            bot.send_photo(chat_id, photo=bio, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–æ–º.")

        


    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "*ü§ñ Null Print Bot ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç *–Ω–µ–≤–∏–¥–∏–º—ã–π –ø—Ä–∏–Ω—Ç (–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫)* –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
        "–†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤—Å—ë –ø—Ä–æ—Å—Ç–æ!\n\n"
        
        "*üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ *—Ñ–∞–π–ª (document)*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ.\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–ø—Ä–∏–Ω—Ç (—á/–±) ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç *—Å–∫—Ä—ã—Ç–æ –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è* –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ.\n"
        "3Ô∏è‚É£ –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ.\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—à—å –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å *–≤–Ω–µ–¥—Ä—ë–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–æ–º*. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–º –∂–µ —Å–ø–æ—Å–æ–±–æ–º (—Ñ–æ—Ç–æ/—Ñ–∞–π–ª).\n\n"

        "*‚öôÔ∏è –ß—Ç–æ –∑–Ω–∞—á–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        "`–ö–∞–Ω–∞–ª` ‚Äî –∫–∞–∫–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (R, G –∏–ª–∏ B)\n"
        "`–î–µ–ª—å—Ç–∞` ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –º–µ–Ω—è—Ç—å —è—Ä–∫–æ—Å—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 5 –¥–æ 25)\n"
        "`–ü–æ—Ä–æ–≥` ‚Äî –ø–æ—Ä–æ–≥ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ –ø—Ä–∏–Ω—Ç–∞ (–æ—Ç 0 –¥–æ 255) ‚Äî –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ = –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–æ\n\n"

        "*üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:*\n"
        "–ï—Å–ª–∏ —Ç—ã —É–∂–µ –≤–≤–æ–¥–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–Ω—å—à–µ ‚Äî –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ.\n\n"

        "*üìÅ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:*\n"
        "‚úÖ –§–æ—Ç–æ (JPEG/PNG)\n"
        "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã-—Ñ–∞–π–ª—ã (–¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)\n\n"

        "*üîÑ –°–±—Ä–æ—Å:* \n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∏ –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –∑–∞–Ω–æ–≤–æ. \n\n"

        "*üÜò –ö–æ–º–∞–Ω–¥—ã:*\n"
        "/create ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤—Ä—É—á–Ω—É—é (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "/cancel ‚Äî –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        
    )

    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['cancel'])
def cancel_session(message):
    chat_id = message.chat.id
    if chat_id in user_sessions:
        user_sessions.pop(chat_id)
        bot.send_message(chat_id, "‚ùå –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


# –¢–≤–æ–π Telegram chat_id ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—ë —á–∏—Å–ª–æ:
ADMIN_CHAT_ID = 5682825129  # <- —Å—é–¥–∞ —Å–≤–æ–π chat_id –ø–æ—Å—Ç–∞–≤—å

@bot.message_handler(commands=['allusers'])
def all_users(message):
    if message.chat.id != ADMIN_CHAT_ID:
        bot.send_message(message.chat.id, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users = load_users()
    if not users:
        bot.send_message(message.chat.id, "üìÇ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    response_lines = ["üìã *–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*"]
    for chat_id, info in users.items():
        line = (f"‚Ä¢ ID: `{chat_id}`\n"
                f"  –ò–º—è: {info.get('first_name', '')}\n"
                f"  –õ–æ–≥–∏–Ω: @{info.get('username', '')}\n"
                f"  –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {info.get('first_seen', '')}\n"
                f"  –ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {info.get('generate_count', 0)}\n"
                f"  –ü—Ä–µ–º–∏—É–º: {'‚úÖ' if info.get('is_premium', False) else '‚ùå'}\n")
        response_lines.append(line)

    response_text = "\n".join(response_lines)
    # Telegram –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è ~4096, –µ—Å–ª–∏ –±–∞–∑–∞ –±–æ–ª—å—à–∞—è ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –æ —Ä–∞–∑–±–∏–≤–∫–µ
    bot.send_message(message.chat.id, response_text, parse_mode="Markdown")

@bot.message_handler(commands=['profile'])
def profile(message):
    users = load_users()
    chat_id = str(message.chat.id)

    if chat_id not in users:
        bot.send_message(message.chat.id, "‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
        return

    user_data = users[chat_id]
    username = user_data.get('username', '‚Äî')
    first_name = user_data.get('first_name', '‚Äî')
    first_seen = user_data.get('first_seen', '‚Äî')
    generate_count = user_data.get('generate_count', 0)
    is_premium = user_data.get('is_premium', False)

    profile_text = f"""üßæ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*  
üë§ *–ò–º—è:* `{first_name}`  
üîó *Username:* @{username if username else '‚Äî'}  
üìÖ *–° –Ω–∞–º–∏ —Å:* {first_seen}  
üñºÔ∏è *–ì–µ–Ω–µ—Ä–∞—Ü–∏–π:* {generate_count}  
üíé *–ü—Ä–µ–º–∏—É–º:* {'–î–∞ ‚úÖ' if is_premium else '–ù–µ—Ç ‚ùå'}
"""

    if not is_premium:
        profile_text += "\n\nüöÄ *–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?*\n–û—Ñ–æ—Ä–º–∏ –ø—Ä–µ–º–∏—É–º –∫–æ–º–∞–Ω–¥–æ–π /premium"

    bot.send_message(message.chat.id, profile_text, parse_mode="Markdown")


ADMIN_ID = 5682825129  # ‚Üê —Å—é–¥–∞ —Ç–≤–æ–π Telegram ID

@bot.message_handler(commands=['premium'])
def premium(message):
    users = load_users()
    chat_id = str(message.chat.id)

    if chat_id in users and users[chat_id].get("is_premium", False):
        text = """üéâ *–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º!*

üîì –ë–µ–∑–ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π  
‚è© –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ  
üö´ –ù–µ—Ç –æ—á–µ—Ä–µ–¥–µ–π  
ü§ù –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è"""
        bot.send_message(message.chat.id, text, parse_mode="Markdown")
        return

    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º, —Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    text = """üíé *–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏*:

üîì –ë–µ–∑–ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π  
‚è© –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ  
üö´ –ù–µ—Ç –æ—á–µ—Ä–µ–¥–∏  
ü§ù –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º  

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–º–∏—É–º ‚¨áÔ∏è"""

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å üíé", callback_data="request_premium"))
    bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(commands=['remove_premium'])
def remove_premium(message):
    if str(message.from_user.id) != str(ADMIN_ID):  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º:")
    bot.register_next_step_handler(msg, process_remove_premium)

def process_remove_premium(message):
    user_id = str(message.text).strip()
    users = load_users()

    if user_id not in users:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    if not users[user_id].get("is_premium", False):
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *–Ω–µ –±—ã–ª–æ* –ø—Ä–µ–º–∏—É–º–∞.", parse_mode="Markdown")
        return

    users[user_id]["is_premium"] = False
    save_users(users)

    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç.", parse_mode="Markdown")
    try:
        bot.send_message(user_id, "‚ö†Ô∏è –í–∞—à –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –±—ã–ª —Å–Ω—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except:
        pass  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

@bot.message_handler(commands=['admin'])
def show_admin_commands(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = (
        "üîß <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üìä /allusers ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ\n"
        "üì• /remove_premium ‚Äî –£–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚öôÔ∏è /setlimits ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n"
        "üì¢ /admin ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥\n"
        "üí¨ /send_message ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
    )
    bot.send_message(message.chat.id, text, parse_mode="HTML")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
pending_messages = {}

@bot.message_handler(commands=['send_message'])
def start_send_message(message):
    if str(message.from_user.id) != str(ADMIN_ID):
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    msg = bot.send_message(message.chat.id, "üî¢ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:")
    bot.register_next_step_handler(msg, get_user_id_for_message)

def get_user_id_for_message(message):
    try:
        user_id = int(message.text)
        pending_messages[message.chat.id] = {'target_id': user_id}
        msg = bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, get_message_text)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /send_message")

def get_message_text(message):
    text = message.text
    pending_messages[message.chat.id]['text'] = text

    preview = (
        f"üì§ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n"
        f"üë§ –ö–æ–º—É: <code>{pending_messages[message.chat.id]['target_id']}</code>\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    )

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")
    )

    bot.send_message(message.chat.id, preview, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_send", "cancel_send"])
def handle_send_confirmation(call):
    chat_id = call.message.chat.id

    if call.data == "confirm_send":
        data = pending_messages.get(chat_id)
        if data:
            try:
                bot.send_message(data['target_id'], f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{data['text']}")
                bot.edit_message_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", chat_id, call.message.message_id)
            except Exception as e:
                bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", chat_id, call.message.message_id)
        else:
            bot.edit_message_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", chat_id, call.message.message_id)
    else:
        bot.edit_message_text("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id, call.message.message_id)

    if chat_id in pending_messages:
        del pending_messages[chat_id]


@bot.callback_query_handler(func=lambda call: call.data == "request_premium")
def handle_premium_request(call):
    user = call.from_user
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id, "üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    bot.send_message(chat_id, "üì¨ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞.")

    admin_text = f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{'‚Äî' if not user.username else user.username} ({user.first_name}) —Ö–æ—á–µ—Ç –ø—Ä–µ–º–∏—É–º!"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data=f"grant_premium:{user.id}"))
    bot.send_message(ADMIN_ID, admin_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("grant_premium:"))
def grant_premium(call):
    user_id = call.data.split(":")[1]
    users = load_users()
    if user_id in users:
        users[user_id]["is_premium"] = True
        save_users(users)
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø.")
    else:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



bot.polling()
